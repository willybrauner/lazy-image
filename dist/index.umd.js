!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e||self).lazyImage={})}(this,function(e){const t={w:"width",x:"density"},n=e=>e.reduce((e,t)=>(e.width||0)>t.width?e:t,e[0]),r={LAZY_LOAD:"lazyload",LAZY_LOADING:"lazyloading",LAZY_LOADED:"lazyloaded"};e.lazyBackgroundImage=function({$root:e=document.body,$element:o,srcset:l,additonalUrl:i,lazyCallback:s=(()=>{}),observerOptions:a={},bigQuality:c=!1}={}){const u="data-background-srcset",d="data-background-id";let g;const m=[];let f=0;const b=()=>{y(),window.addEventListener("resize",w)},h=()=>{v(),b()},v=()=>{g.disconnect(),window.removeEventListener("resize",w)},w=()=>{h()},y=()=>{if(!("IntersectionObserver"in window))return;g=new IntersectionObserver(O,a);const t=o||l?o?[o]:null:(()=>{const t=e.querySelectorAll(`[${u}]:not(img):not(figure)`);return null!=t&&t.length?[...t]:null})();null==t||t.forEach(e=>{const t=A(e),n=null==m?void 0:m[e.getAttribute(d)];(!n||(null==n?void 0:n.width)<t.width&&t.width<=t.biggestImageDataOject.width)&&g.observe(e)})},O=e=>{null==e||e.forEach(function(e){try{var t;const n=e.target;if(D(n,r.LAZY_LOAD),!e.isIntersecting)return Promise.resolve();const o=A(n),l=n.getAttribute(d);return l?m[l]=null==o?void 0:o.imageDataObject:(n.setAttribute(d,`${f}`),m[f]=null==o?void 0:o.imageDataObject,f++),null!=o&&null!=(t=o.imageDataObject)&&t.url?(D(n,r.LAZY_LOADING),Promise.resolve(L(n,o.imageDataObject.url)).then(function(){D(n,r.LAZY_LOADED),p(n,o.imageDataObject),g.unobserve(n)})):Promise.resolve()}catch(e){return Promise.reject(e)}})},A=e=>{var r;const o=(null==(r=e.getBoundingClientRect())?void 0:r.width)||window.innerWidth,i=l||e.getAttribute(u),s=function(e){return((e,t)=>{let n=null,r=[];for(;null!==(n=t.exec(e));)r.push(n);return r})(e,/(\S*[^,\s])(\s+([\d.]+)(x|w))?/g).map(([,e,,n,r])=>{let o=t[r];return o?{url:e,[o]:parseFloat(n)}:{url:e}})}(i);return{width:o,dataSrcset:i,imageDataObject:function(e,t,r=!1){if(!e)return;const o=e.map(e=>null==e?void 0:e.width).sort((e,t)=>e-t).filter(e=>e>t),l=n(e),i=e.map(e=>e.width===o[r&&o.length>1?1:0]?e:l.width<=t?l:void 0).filter(e=>e);return i.length>0?i[0]:null}(s,o,c),biggestImageDataOject:n(s)}},p=(e,t)=>{e.style.backgroundImage=[`url('${t.url}')`,i&&`, url('${i}')`].filter(e=>e).join("")},L=(e,t)=>new Promise(e=>{const n=document.createElement("img");n.src=t,n.onload=()=>{e()}}),D=(e,t)=>{Object.values(r).forEach(t=>{e.classList.remove(t)}),e.classList.add(t),s(t)};return{start:b,update:h,stop:v}},e.lazyImage=function({$element:e,srcset:t,src:n,$root:o=document.body,lazyCallback:l=(()=>{}),observerOptions:i={}}={}){let s;const a=!!e||!!n||!!t,c=()=>{d()},u=()=>{s.disconnect()},d=()=>{if(!("IntersectionObserver"in window))return;s=new IntersectionObserver(g,i);const t=a?e?[e]:null:(()=>{const e=[...o.querySelectorAll("[data-srcset]")||[],...o.querySelectorAll("[data-src]")||[]];return null!=e&&e.length?e:null})();null==t||t.forEach(e=>s.observe(e))},g=e=>{e.forEach(function(e){try{const t=e.target;f(t,"lazyload");const n=function(){if(e.isIntersecting)return s.unobserve(t),f(t,"lazyloading"),Promise.resolve(m(t)).then(function(){f(t,"lazyloaded")})}();return Promise.resolve(n&&n.then?n.then(function(){}):void 0)}catch(e){return Promise.reject(e)}})},m=e=>new Promise(r=>{const o=n||e.getAttribute("data-src"),l=t||e.getAttribute("data-srcset"),i=document.createElement("img");o&&(i.src=o),l&&(i.srcset=l),i.onload=()=>{o&&(e.src=o),l&&(e.srcset=l),r()}}),f=(e,t)=>{Object.values(r).forEach(t=>{e.classList.remove(t)}),e.classList.add(t),l(t)};return{start:c,update:()=>{u(),c()},stop:u}},e.lazyState=r});
//# sourceMappingURL=index.umd.js.map
